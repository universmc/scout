const { Groq } = require("groq-sdk");
const groqUser = new Groq();
const fs = require("fs");

// Fonction pour ajouter une t√¢che √† la persistance des t√¢ches
function addTask(task) {
  const tasks = getTasks();
  tasks.push(task);
  fs.writeFileSync('./tasks.json', JSON.stringify(tasks));
}

// Fonction pour r√©cup√©rer les t√¢ches
function getTasks() {
  const data = fs.existsSync('./tasks.json') ? fs.readFileSync('./tasks.json', 'utf8') : '[]';
  return JSON.parse(data);
}

// Fonction principale pour cr√©er un message stylis√© et le structurer en JSON
function principe(project, Model_ia, context, role, skills, task, process, characteristics, ImmediateActions, feedbackPrediction, date = new Date().toLocaleDateString('fr-FR')) {
  const message = `
  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
  ‚ïë ‚≠êÔ∏è Data Report - ${date} ‚≠êÔ∏è         ‚ïë
  ‚ïü‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ï¢
  ‚ïë üìã Project: ${project}                     ‚ïë
  ‚ïë üìà Model: ${Model_ia}                     ‚ïë
  ‚ïë üåê Context: ${context}                    ‚ïë
  ‚ïë üíº Role: ${role}                          ‚ïë
  ‚ïë üöÄ Skills: ${skills}                      ‚ïë
  ‚ïë üìã Tasks: ${task}                        ‚ïë
  ‚ïë üîÑ Process: ${process}                    ‚ïë
  ‚ïë üõ† Characteristics: ${characteristics}     ‚ïë
  ‚ïë ‚ö°Ô∏è Immediate Actions: ${ImmediateActions} ‚ïë
  ‚ïë üîÆ Feedback: ${feedbackPrediction}        ‚ïë
  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
  `;

  console.log(message);

  const response = {
    date,
    project,
    Model_ia,
    context,
    role,
    skills,
    task,
    process,
    characteristics,
    ImmediateActions,
    feedbackPrediction,
    message
  };

  return response;
}

// Generer le contenu JSON √† partir de la r√©ponse formatt√©
(async () => {
  const principeResponse = principe(
    'Projet', 
    'Model_ia', 
    'Context', 
    'Role', 
    'Skills', 
    'Tasks', 
    'Process', 
    'Characteristics', 
    'ImmediateActions', 
    'feedbackPrediction'
  );

  const completion = await groqUser.chat.completions.create({
    messages: [
      { role: "assistant", content: "Initialisation de l'instance" },
      { role: "user", content: JSON.stringify(principeResponse) },
      { role: "system", content: "Ta r√©ponse devra √™tre r√©dig√© int√©gralement au format JSON Pour √™tre optimis√© dans un autre algorithme" }
    ],
    model: "mixtral-8x7b-32768",
    temperature: 0.6,
    max_tokens: 4096,
  });

  const jsonContent = completion.choices[0]?.message?.content;
  const outputFilePath = "Model-ia_" + new Date().toISOString().replace(/[-:TZ]/g, "") + ".json";
  fs.writeFileSync(outputFilePath, jsonContent);
  console.log("Documentation du constructeur g√©n√©r√©e et enregistr√©e dans " + outputFilePath);
})();